service: recording-site
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  architecture: arm64
  memorySize: 128
  region: ${opt:region, env:AWS_REGION, 'us-east-1'}
  logRetentionInDays: ${opt:logretention, env:AWS_LOG_RETENTION, '14'}
  httpApi:
    cors: true
  tags:
    Purpose: ${self:custom.stack_name}
  deploymentBucket:
    tags:
      Purpose: ${self:service}

  environment:
    BASE_PATH: ${self:custom.config.BASE_PATH}
    NOTIFY_WEBBUILDER_QUEUE_ARN: ${self:custom.config.NOTIFY_WEBBUILDER_QUEUE_ARN}
    MEETINGS_TABLE_ARN: ${self:custom.config.MEETINGS_TABLE_ARN}
    WEBSITE_BUCKET: !Ref WebsiteBucket
    CLOUDFRONT_ID: !Ref WebsiteDistribution
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: ${self:custom.config.MEETINGS_TABLE_ARN}
        - Effect: Allow
          Action:
            - s3:HeadObject
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - "Ref" : "WebsiteBucket"
                - "/*"


custom:
  default_stage: dev
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:service}-${self:custom.stage}
  # Store configuration and secrets in `config.yml`.  See
  # https://www.richdevelops.dev/blog/keeping-secrets-out-of-git
  config: ${file(config.yml):${self:custom.stage}}

  pythonRequirements:
    pythonBin: .venv/bin/python
    dockerizePip: false

  # customDomain:
  #   domainName: ${self:custom.config.HOSTNAME}
  #   stage: ${self:custom.stage}
  #   basePath: ${self:custom.config.BASE_PATH}
  #   certificateName: ${self:custom.config.CERTIFICATE_NAME}
  #   createRoute53Record: true
  #   endpointType: 'regional'
  #   securityPolicy: tls_1_2
  #   apiType: http
  #   autoDomain: false
	
  prune:
    automatic: true
    number: 3


functions:
  queue_receiver:
    handler: serverless_recordings_site.queue_receiver.handler
    timeout: 10
    events:
      - sqs: ${self:custom.config.NOTIFY_WEBBUILDER_QUEUE_ARN}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueUrl
        Resource: ${self:custom.config.NOTIFY_WEBBUILDER_QUEUE_ARN}
      - Effect: Allow
        Action:
          - cloudfront:CreateInvalidation
        Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'
  
  auth_check:
    handler: serverless_recordings_site.authn_check.handler
    url: true
    environment:
      PUBLIC_KEY_ID: !Ref WebsiteDistributionPublicKey
      HOSTNAME: ${self:custom.config.HOSTNAME}

  rebuild_site:
    handler: serverless_recordings_site.rebuild_site.handler
    timeout: 300
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueUrl
        Resource: ${self:custom.config.NOTIFY_WEBBUILDER_QUEUE_ARN}
      - Effect: Allow
        Action:
          - cloudfront:CreateInvalidation
        Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

# CloudFormation resource templates
resources:
  Description: Generate the website for Zoom recordings, using a serverless(.)com stack
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:custom.config.WEBSITE_BUCKET}
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    WebsiteBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref WebsiteBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${WebsiteDistributionOriginIdentity}'
                Action: 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
            
    WebsiteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.config.HOSTNAME}
          Origins:
            - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
              Id: S3-private-bucket
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${WebsiteDistributionOriginIdentity}'
#            - DomainName: REPLACE.WITH.AuthUnderscorecheckLambdaFunctionUrl.FunctionUrl
            - DomainName: ${self:custom.config.AUTH_ENDPOINT_DEVTEMP}
              Id: auth-check
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          HttpVersion: http2
          IPV6Enabled: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /login.html
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: S3-private-bucket
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized managed policy
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin managed policy
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt WebsiteDistributionIndexRedirectFunction.FunctionMetadata.FunctionARN
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            - PathPattern: /*/*/*/
              TargetOriginId: S3-private-bucket
              ViewerProtocolPolicy: redirect-to-https
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled managed policy
              FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !GetAtt WebsiteDistributionIndexRedirectFunction.FunctionMetadata.FunctionARN
              TrustedKeyGroups: 
                - !Ref WebsiteDistributionPublicKeyGroup
            - PathPattern: /*/*/*/index.html
              TargetOriginId: S3-private-bucket
              ViewerProtocolPolicy: redirect-to-https
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled managed policy
              TrustedKeyGroups: 
                - !Ref WebsiteDistributionPublicKeyGroup
            - PathPattern: /_login
              TargetOriginId: auth-check
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - POST
                - DELETE
                - PUT
                - PATCH
              ViewerProtocolPolicy: redirect-to-https
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled managed policy
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.config.CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only

    WebsiteDistributionIndexRedirectFunction:
      Type: AWS::CloudFront::Function
      Properties:
        AutoPublish: true
        FunctionCode: !Sub |
                function handler(event) {
                    var request = event.request;
                    var uri = request.uri;
                    
                    // Check whether the URI is missing a file name.
                    if (uri.endsWith('/')) {
                        request.uri += 'index.html';
                    } 
                    // Check whether the URI is missing a file extension.
                    else if (!uri.includes('.')) {
                        request.uri += '/index.html';
                    }

                    return request;
                }
        FunctionConfig:
          Comment: Redirect bare root to index.html
          Runtime: cloudfront-js-1.0
        Name: !Sub "${self:custom.stack_name}-indexRedirectFunction"

    WebsiteDistributionOriginIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'origin identity'

    WebsiteDistributionPublicKeyGroup:
      Type: AWS::CloudFront::KeyGroup
      Properties:
        KeyGroupConfig:
          Name: ${self:custom.stack_name}
          Items: 
            - !Ref WebsiteDistributionPublicKey

    # Note well https://dltj.org/article/cloudformation-invalid-request-cloudfront-publickey/
    WebsiteDistributionPublicKey:
      Type: AWS::CloudFront::PublicKey
      Properties:
        PublicKeyConfig:
          Name: ${self:custom.stack_name}
          CallerReference: ${self:custom.config.PUBLIC_KEY_CALLER_REFERENCE}
          EncodedKey: ${self:custom.config.PUBLIC_KEY_ENCODED}

    WebsiteMasterRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: ${self:custom.config.HOSTNAME}.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt WebsiteDistribution.DomainName
        HostedZoneId: ${self:custom.config.HOSTED_ZONE_ID}

    WebsiteMasterAAAARecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: ${self:custom.config.HOSTNAME}.
        Type: AAAA
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt WebsiteDistribution.DomainName
        HostedZoneId: ${self:custom.config.HOSTED_ZONE_ID}


package:
  patterns:
    - '!node_modules/**'
    - '!.venv/**'
    - '!__pycache__'
    - '!config.yml'

plugins:
  - serverless-python-requirements
#  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-iam-roles-per-function